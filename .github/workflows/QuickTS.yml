#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: test-6.6-B70

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/GruntFish/immortalwrt-mtkhnat-6.6
  REPO_BRANCH: openwrt-24.10-6.6
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: configs/test.config
  DIY_P0_SH: scripts/HNAT.sh
  DIY_P1_SH: scripts/2410-diy-part1.sh
  DIY_P2_SH: scripts/2410-diy-part2.sh
  DIY_P3_SH: scripts/2410-diy-part3.sh
  RELEASE_FILE: 6.6-release-note.txt
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

  - name: Check HNAT source existence
      run: |
        echo "🔍 检查 HNAT 源码是否存在..."
        
        # 检查内核驱动源码
        echo "=== 内核驱动源码检查 ==="
        if [ -d "target/linux/mediatek/files-6.6/drivers/net/ethernet/mediatek/mtk_hnat" ]; then
          echo "✅ 找到 HNAT 内核驱动源码"
          echo "文件列表:"
          ls -la target/linux/mediatek/files-6.6/drivers/net/ethernet/mediatek/mtk_hnat/
        else
          echo "❌ 未找到 HNAT 内核驱动源码"
          echo "搜索所有 hnat 相关文件:"
          find . -name "*hnat*" -type f | head -10
        fi
        
        # 检查模块定义
        echo "=== 模块定义检查 ==="
        if [ -f "target/linux/ramips/modules.mk" ]; then
          echo "✅ 找到模块定义文件"
          grep -A5 "mtk-hnat" target/linux/ramips/modules.mk || echo "未找到 mtk-hnat 定义"
        fi
        
    - name: Configure for HNAT
      run: |
        echo "🔧 配置 HNAT 支持..."
        
        # 使用 MT7621 配置
        cp target/linux/ramips/mt7621/config-6.6 .config
        
        # 确保 HNAT 配置为模块
        if ! grep -q "CONFIG_NET_MEDIATEK_HNAT=m" .config; then
          echo "CONFIG_NET_MEDIATEK_HNAT=m" >> .config
          echo "✅ 已添加 HNAT 模块配置"
        fi
        
        # 选择目标平台
        echo "CONFIG_TARGET_ramips=y" >> .config
        echo "CONFIG_TARGET_ramips_mt7621=y" >> .config
        
        echo "📋 HNAT 相关配置:"
        grep -i "mediatek.*hnat" .config
        
    - name: Quick build and detect HNAT
      run: |
        echo "🚀 开始快速编译并检测 HNAT 模块..."
        
        # 准备工具链（静默模式）
        echo "⚙️ 准备工具链..."
        make tools/install -j$(nproc) > /dev/null 2>&1
        make toolchain/install -j$(nproc) > /dev/null 2>&1
        
        # 清理之前的编译
        rm -rf build_dir/target-*/linux-*/linux-*/drivers/net/ethernet/mediatek/mtk_hnat/
        
        echo "=== 开始内核编译，实时监控 HNAT 模块 ==="
        
        # 编译内核（后台运行）
        make target/linux/compile -j1 V=s 2>&1 | tee /tmp/build.log &
        BUILD_PID=$!
        
        # 监控进程 - 找到HNAT就立即停止
        HNAT_FOUND=false
        MAX_WAIT=300  # 最多等待5分钟
        
        for i in $(seq 1 $MAX_WAIT); do
          # 检查编译进程是否还在运行
          if ! kill -0 $BUILD_PID 2>/dev/null; then
            echo "ℹ️ 编译进程已结束"
            break
          fi
          
          # 搜索 HNAT .ko 文件
          KO_FILE=$(find . -name "mtkhnat.ko" -type f 2>/dev/null | head -1)
          if [ -z "$KO_FILE" ]; then
            KO_FILE=$(find . -name "hnat.ko" -type f 2>/dev/null | head -1)
          fi
          
          if [ -n "$KO_FILE" ] && [ "$HNAT_FOUND" = "false" ]; then
            echo ""
            echo "🎉🎉🎉 HNAT 模块编译成功！ 🎉🎉🎉"
            echo "=========================================="
            echo "📁 文件路径: $KO_FILE"
            echo "📊 文件大小: $(ls -lh "$KO_FILE" | awk '{print $5}')"
            echo "🔍 绝对路径: $(pwd)/$KO_FILE"
            echo ""
            
            # 显示文件详细信息
            echo "📋 文件详细信息:"
            ls -la "$KO_FILE"
            echo ""
            
            # 显示目录内容
            echo "📁 所在目录: $(dirname "$KO_FILE")"
            ls -la "$(dirname "$KO_FILE")" | head -5
            echo ""
            
            HNAT_FOUND=true
            
            # 立即停止编译进程
            echo "🛑 检测到HNAT模块，立即停止编译..."
            kill $BUILD_PID 2>/dev/null
            break
          fi
          
          # 检查编译日志中的HNAT活动
          if tail -n 10 /tmp/build.log | grep -q "hnat\.c\|mtk_hnat"; then
            echo "📝 HNAT编译中: $(tail -n 10 /tmp/build.log | grep 'hnat\.c\|mtk_hnat' | tail -1)"
          fi
          
          sleep 3
        done
        
        if [ "$HNAT_FOUND" = "false" ]; then
          echo ""
          echo "❌ 超时未找到 HNAT 模块"
          echo "=========================================="
          
          # 停止编译进程
          kill $BUILD_PID 2>/dev/null
          
          # 错误分析
          echo "🔍 错误分析:"
          grep -i "error" /tmp/build.log | grep -i "hnat\|mtk_hnat" | head -5 || echo "未找到HNAT相关编译错误"
          
          echo "📋 HNAT相关日志:"
          grep -i "hnat\|mtk_hnat" /tmp/build.log | tail -10 || echo "无HNAT相关日志"
        fi
        
    - name: Upload build log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: hnat-build-log
        path: /tmp/build.log
        retention-days: 3
